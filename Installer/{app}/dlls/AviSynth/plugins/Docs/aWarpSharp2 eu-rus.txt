aWarpSharp package 2009.06.19 - a WarpSharpening filter for Avisynth 2.5

  This filter implements the same WarpSharpening algorithm as aWarpSharp by MarcFD,
  but with several bugfixes and optimizations. In addition to complete algorithm
  filter aWarpSharp2 parts of algorithm are also available as aSobel, aBlur, aWarp.

  Requires YV12 and at least MMXExt capable CPU, optimized for Nehalem, blur will
  be more precise around frame borders if SSSE3 is available.

Syntax:
  aWarpSharp2(int "thresh", int "blur", int "type", int "depth", int "chroma")
  aSobel(int "thresh", int "chroma")
  aBlur(int "blur", int "type", int "chroma")
  aWarp(edge_mask_clip, int "depth", int "chroma")

  aWarpSharp2() is the same as aWarp(aSobel().aBlur()) but a bit faster.

  It's good idea to do anti-aliasing and temporal filtering over edge mask before
  passing it to warp stage if you want more stable results.

  thresh: 0..255, default 128
    Saturation limit for edge detection. Reduce for less aggressive sharpening.

  blur: 0..100, default 2 for type 0, 16 for type 1
    Number of blur passes over edge mask. Less passes increase sharpening effect,
    but can produce major artifacts with high depth and thresh. You can use values
    higher than 100, but probably won't see any difference.
    Chroma is processed with (blur+1)/2 passes.

  type: 0..1, default 0
    Type of blur:
      0 - radius 6 blur
      1 - radius 2 blur, requires around 8x more passes than type 0 for the same
          effect (will be 2.5x slower), but produce better quality

  depth: -128..127, default 16
    Strength of the final warping. Negative values result in warping in opposite
    direction.

  chroma: 0..4
    Processing mode for chroma planes (U and V):
      0 - fill with zeroes
      1 - don't care, default for aSobel and aBlur
      2 - copy
      3 - process
      4 - guide by luma - aWarpSharp and aWarp only, default for them

Original aWarpSharp compatibility:
  Mapping from original aWarpSharp parameters:
    thresh = thresh*256
    blur   = blurlevel
    depth  = depth*blurlevel/2
    chroma = 0->2, 1->4, 2->3

aWarpSharp пакет от 2009.06.19 - фильтр WarpSharpening для Avisynth 2.5

----------------------------------------------------------------------------

Описание на русском языке

  Фильтр повышения резкости деформацией.
  Этот фильтр осуществляет тот же самый алгоритм WarpSharpening,как aWarpSharp by MarcFD,  но с несколькими зафиксированными багами и оптимизацией. В добавлении, чтобы закончить алгоритм  aWarpSharp2 части фильтра алгоритма также доступны, как aSobel, aBlur, aWarp.

  Требует YV12 и по крайней мере MMXExt способный CPU, оптимизированный для Nehalem, blur будет более точным вокруг границ кадра, если SSSE3 доступен.

Синтаксис:

  aWarpSharp2(int "thresh", int "blur", int "type", int "depth", int "chroma")
  aSobel(int "thresh", int "chroma")
  aBlur(int "blur", int "type", int "chroma")
  aWarp(edge_mask_clip, int "depth", int "chroma")

  aWarpSharp2() - то же самое, как и aWarp(aSobel().aBlur ()), но немного быстрее.

  Это - хорошая идея, чтобы сделать анти-айлизинг и временную фильтрацию по маске края перед проходом стадии деформации, если Вы хотите получить более устойчивые результаты.

  thresh: 0.. 255, значение по умолчанию 128
    Предел насыщенности для обнаружения края. Уменьшите для менее агрессивного увеличения резкости.

  blur: 0.. 100, значение по умолчанию 2 для типа 0, 16 для типа 1
    Номер blur передается по маске края. Меньше значение увеличивает повышение резкости,  но может произвести основные артифакты с высокими depth(глубиной) и thresh. Вы можете использовать значения выше чем 100, но вероятно не будет видеть никакого различия.
    Сигнал цветности обработан с (blur+1)/2 .

  type: 0.. 1, значение по умолчанию 0
    Тип блюра:
      0 - радиус 6 blur
      1 - радиус 2 blur, требует вокруг 8x больше проходов, чем тип 0 для того же самого эффекта (будет в 2.5x медленнее), но производит лучшее качество

  depth(глубина):-128.. 127, значение по умолчанию 16
    Уровень конечного warping(искривления). Отрицательные значения приводят к изменению искривления в противоположном направлении.

  chroma(сигнал цветности): 0.. 4
    Обработка режима для цветоразностных сигнала цветности (U и V):
      0 - обнуление
      1 - всё равно, значение по умолчанию для aSobel и aBlur
      2 - копия
      3 - процесс
      4 - обработка с luma - aWarpSharp и aWarp только, значение по умолчанию для них

Оригинальный aWarpSharp по совместимости с новой версией:
  Отображение от оригинала aWarpSharp2 параметров:
    thresh = thresh*256
    blur = blurlevel
    depth = depth*blurlevel/2
    chroma = 0-> 2, 1-> 4, 2-> 3

Примеры командной строки:
   aWarpsharp2(thresh=128,blur=2,type=0,depth=16,chroma=4) # быстрее
   aWarpsharp2(thresh=128,blur=16,type=1,depth=16,chroma=4) # медленнее, но качественнее blur



Copyright (C) 2003 MarcFD, 2009 Skakov Pavel

